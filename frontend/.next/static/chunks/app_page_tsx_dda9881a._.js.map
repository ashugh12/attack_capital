{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/ashutosh/Attack%20Capital/assignment/frontend/app/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport { LiveKitRoom, RoomAudioRenderer } from '@livekit/components-react';\nimport { ConnectionState, Room, RoomEvent } from 'livekit-client';\n\ntype ConnectionDetails = {\n  serverUrl: string;\n  roomName: string;\n  participantName: string;\n  participantToken: string;\n};\n\nfunction ChatInterface({ messages, setMessages, room }: { \n  messages: Array<{id: string, text: string, isUser: boolean}>, \n  setMessages: React.Dispatch<React.SetStateAction<Array<{id: string, text: string, isUser: boolean}>>>,\n  room: Room | null\n}) {\n  const [messageInput, setMessageInput] = useState('');\n\n  const sendMessage = async () => {\n    if (!messageInput.trim() || !room) return;\n\n    const userMessage = {\n      id: Date.now().toString(),\n      text: messageInput,\n      isUser: true\n    };\n    \n    setMessages(prev => [...prev, userMessage]);\n\n    try {\n      // Send message to the agent via LiveKit data channel\n      await room.localParticipant.publishData(\n        new TextEncoder().encode(JSON.stringify({\n          type: 'chat',\n          message: messageInput\n        }))\n      );\n      setMessageInput('');\n      console.log('Message sent to agent:', messageInput);\n    } catch (error) {\n      console.error('Failed to send message:', error);\n      // Remove the message if sending failed\n      setMessages(prev => prev.filter(msg => msg.id !== userMessage.id));\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"chat-container\">\n        <div className=\"status connected\">\n          Agent Status: Connected\n        </div>\n        {messages.map((message) => (\n          <div key={message.id} className={`message ${message.isUser ? 'user' : 'assistant'}`}>\n            <strong>{message.isUser ? 'You' : 'Assistant'}:</strong> {message.text}\n          </div>\n        ))}\n        {messages.length === 0 && (\n          <p>Start typing or speaking to chat with the assistant...</p>\n        )}\n      </div>\n      \n      <div className=\"chat-input\">\n        <input\n          type=\"text\"\n          className=\"input\"\n          value={messageInput}\n          onChange={(e) => setMessageInput(e.target.value)}\n          onKeyPress={(e) => e.key === 'Enter' && sendMessage()}\n          placeholder=\"Type your message...\"\n        />\n        <button \n          className=\"btn btn-secondary\" \n          onClick={sendMessage}\n          disabled={!messageInput.trim()}\n        >\n          Send\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default function Home() {\n  const [room, setRoom] = useState<Room | null>(null);\n  const [connectionState, setConnectionState] = useState<ConnectionState>(ConnectionState.Disconnected);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [messages, setMessages] = useState<Array<{id: string, text: string, isUser: boolean}>>([]);\n  const [serverUrl, setServerUrl] = useState<string>('');\n\n  const connectToRoom = async () => {\n    setIsConnecting(true);\n    try {\n      const response = await fetch('/api/connection-details', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          room_config: {\n            agents: [{ agent_name: 'assistant' }]\n          }\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to get connection details');\n      }\n\n      const connectionDetails: ConnectionDetails = await response.json();\n      setServerUrl(connectionDetails.serverUrl);\n      \n      const newRoom = new Room({\n        adaptiveStream: true,\n        dynacast: true,\n      });\n\n      newRoom.on(RoomEvent.Connected, () => {\n        console.log('Connected to room');\n        setConnectionState(ConnectionState.Connected);\n        setIsConnecting(false);\n      });\n\n      newRoom.on(RoomEvent.Disconnected, () => {\n        console.log('Disconnected from room');\n        setConnectionState(ConnectionState.Disconnected);\n        setIsConnecting(false);\n      });\n\n      newRoom.on(RoomEvent.DataReceived, (payload) => {\n        try {\n          const data = JSON.parse(new TextDecoder().decode(payload));\n          if (data.type === 'chat' && data.message) {\n            setMessages(prev => [...prev, {\n              id: Date.now().toString(),\n              text: data.message,\n              isUser: false\n            }]);\n          }\n        } catch (error) {\n          console.error('Error parsing received data:', error);\n        }\n      });\n\n      await newRoom.connect(connectionDetails.serverUrl, connectionDetails.participantToken);\n      setRoom(newRoom);\n      \n    } catch (error) {\n      console.error('Failed to connect:', error);\n      setIsConnecting(false);\n    }\n  };\n\n  const disconnectFromRoom = async () => {\n    if (room) {\n      await room.disconnect();\n      setRoom(null);\n    }\n  };\n\n  const getStatusText = () => {\n    if (isConnecting) return 'Connecting...';\n    if (connectionState === ConnectionState.Connected) return 'Connected';\n    return 'Disconnected';\n  };\n\n  const getStatusClass = () => {\n    if (isConnecting) return 'status connecting';\n    if (connectionState === ConnectionState.Connected) return 'status connected';\n    return 'status disconnected';\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>AI Voice Assistant</h1>\n      <p style={{ fontSize: '14px', color: '#666', marginBottom: '20px' }}>\n        Built by Ashutosh - Connection Architecture & Integration\n      </p>\n      \n      <div className={getStatusClass()}>\n        Status: {getStatusText()}\n      </div>\n\n      {!room ? (\n        <div>\n          <p>Click the button below to connect to the voice assistant.</p>\n          <button \n            className=\"btn\" \n            onClick={connectToRoom}\n            disabled={isConnecting}\n          >\n            {isConnecting ? 'Connecting...' : 'Connect'}\n          </button>\n        </div>\n      ) : (\n        <LiveKitRoom \n          room={room}\n          connect={true}\n          token={room?.localParticipant?.identity || ''}\n          serverUrl={serverUrl}\n          options={{\n            adaptiveStream: true,\n            dynacast: true,\n          }}\n        >\n          <ChatInterface messages={messages} setMessages={setMessages} room={room} />\n          \n          <div style={{ marginTop: '20px' }}>\n            <button className=\"btn btn-secondary\" onClick={disconnectFromRoom}>\n              Disconnect\n            </button>\n          </div>\n          \n          <RoomAudioRenderer />\n        </LiveKitRoom>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}